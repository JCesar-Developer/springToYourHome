// --- SPRING --- //
    @controller         //Etiqueta que define un controlador
    @RequestMapping     //Etiqueta que permite mapear una ruta URL.
                          Es sobretodo muy utilizado para mapear rutas comunes (Por ejemplo en un CRUD)
    @GetMapping         //Mapea una ruta con el método GET.
    @PostMapping        //Mapea una ruta con el método POST.

----------------------------------------------
--------------- BEANS VALIDATE ---------------
url: https://www.baeldung.com/javax-validation
----------------------------------------------
    @NotEmpty               -> Aplicar a Strings.
    @NotNull                -> Aplicar a no Strings.
    @Email                  -> Para que el formato del correo sea el correcto.
    @size(min= , max= )     -> Define el tamaño mínimo o máximo de un atributo.
    @RequestParam           -> Adquiere un parámetro tras una solicitud HTTP.

-----------------------------------------------
--------------- SPRING SECURITY ---------------
-----------------------------------------------
GRACIAS A SPRING SECURITY, PODEMOS DELEGAR SEGURIDAD DE AUTENTICACIÓN A LAS DIFERNETES:
URL: https://www.udemy.com/course/spring-framework-5/learn/lecture/9534924#questions
    - Rutas(HttpSecurity http)
    - Vistas (sec:authorize)
    - Controladores(Diferente métodos)


VISTAS: NECESITAN THYMELEAF Y VAN DENTRO DE UN ELEMENTO DEL DOM:
----------------------------------------------------------------
    CONDICIONALES:
    --------------
    sec:authorize="isAutheticated()"        -> Muestra contenido solo a un usuario autenticado.
    sec:authorize="hasRole('ROLE_ADMIN')"   -> Muestra contenido solo si el usuario es de tipo ROLE_ADMIN.
    sec:authorize="hasRole('ROLE_USER')"   -> Muestra contenido solo si el usuario es de tipo ROLE_USER.
    ATRIBUTOS:
    ----------
    sec:authentication="name"                   -> Entrega el valor del usuario con autorización en Security.
    sec:authentication="principal.authorities"  -> Muestra el tipo de autorización del usuario.










=============
 PRODUCTO 2:
=============
//PENDIENTE NECESARIO:
- FALTA: Mejorar las vistas (ADRI)
- FALTA: resolver todas las validaciones del crud DISH. (JULIO[Lado controlador] y ADRI[Lado modelo])
    - Validaciones necesarias:

- FALTA: Corregir el UPDATE para las imagenes de cada plato (JULIO) -> No se puede.
         Validador de imagenes                                      -> No se puede.
         2 o más imagenes                                           -> No se puede.
         Mensaje de alerta, de se ha creado o se ha eliminado o se ha modificado satisfactoriamente

    PASO 1: Puedo crear y imagen está vacio. OK
    PASO 2: Puedo guardar y cre

//PENDIENTE OPCIONAL:
- FALTA: Crear el indice para navegar hacia la vista de los distintos platos.
- FALTA: Crear las vistas para mostrar los diferentes MENUS. (DISCUTIR)
- FALTA: Crear los modelos y controladores para interactuar con los MENUS. (DISCUTIR)


=============
 PRODUCTO 3:
=============
- Resolver modelos para USUARIO y ADMIN (JOSE)
- Resolver controladores para USUARIO y ADMIN (JOSE)
- Resolver la funcionalidad del LOGIN. (JOSE)